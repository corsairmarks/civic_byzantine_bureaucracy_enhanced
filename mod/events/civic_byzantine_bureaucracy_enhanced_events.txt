namespace = civic_byzantine_bureaucracy_enhanced

# triggered by empire_init_capital_planet and on_capital_changed
# root = capital, new
# from = capital, previous (may be unset)
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = { has_valid_civic = civic_byzantine_bureaucracy }
		exists = from
		from.owner = { is_country = prev.owner }
		from = {
			is_scope_type = planet
			has_deposit = d_civic_byzantine_bureaucracy_capital
		}
	}
	}
	immediate = {
		add_deposit = d_civic_byzantine_bureaucracy_capital
		save_event_target_as = new_country_capital
		# calculate the jobs created by the deposit on the target planet
		calculate_total_magistrate_jobs_from_deposit = yes
		from = {
			# calculate the jobs created by the deposit on the source planet
			calculate_total_magistrate_jobs_from_deposit = yes
			# count actually-worked magistrate jobs on the source planet
			set_variable = {
				which = num_magistrate_jobs
				value = 0
			}
			every_owned_pop = {
				limit = { has_job = magistrate }
				set_timed_pop_flag = {
					flag = former_magistrate
					days = 7
				}
				prev = {
					change_variable = {
						which = num_magistrate_jobs
						value = 1
					}
				}
			}
			if = {
				limit = {
					exists = sector
					exists = prev.sector
					sector = { is_same_value = prevprev.sector }
				}
				remove_deposit = d_civic_byzantine_bureaucracy_capital
				# Pops intentionally move to follow the empire capital even when it changes within the same sector;
				# I want them to feel semi-autonomous as described
			}
			set_variable = {
				which = num_planet_pops
				value = trigger:num_pops
			}
			while = {
				limit = {
					# minimum of: Pops - 1, worked source jobs, source jobs from deposit, target jobs from deposit
					check_variable = {
						which = num_planet_pops
						value > 1
					}
					check_variable = {
						which = num_magistrate_jobs
						value > 0
					}
					check_variable = {
						which = num_magistrate_jobs_from_deposit
						value > 0
					}
					prev = {
						check_variable = {
							which = num_magistrate_jobs_from_deposit
							value > 0
						}
					}
				}
				random_owned_pop = {
					limit = { has_pop_flag = former_magistrate }
					unemploy_pop = yes
					clear_pop_category = yes
					remove_pop_flag = former_magistrate
					resettle_pop = {
						pop = this
						planet = event_target:new_country_capital
					}
				}
				change_variable = {
					which = num_planet_pops
					value = -1
				}
				change_variable = {
					which = num_magistrate_jobs
					value = -1
				}
				change_variable = {
					which = num_magistrate_jobs_from_deposit
					value = -1
				}
				prev = {
					change_variable = {
						which = num_magistrate_jobs_from_deposit
						value = -1
					}
				}
			}
			clear_variable = num_magistrate_jobs_from_deposit
			clear_variable = num_magistrate_jobs
			clear_variable = num_planet_pops
		}

		clear_variable = num_magistrate_jobs_from_deposit
	}
}

# triggered by on_monthly_pulse_country and on_post_government_changed
# root = country
country_event = {
	id = civic_byzantine_bureaucracy_enhanced.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_valid_civic = civic_byzantine_bureaucracy
	}
	immediate = {
		every_owned_sector = {
			random_owned_planet = {
				limit = {
					is_sector_capital = yes
					NOT = { has_deposit = d_civic_byzantine_bureaucracy_capital }
				}
				add_deposit = d_civic_byzantine_bureaucracy_capital
				save_event_target_as = new_sector_capital
				prev = {
					every_owned_planet = {
						limit = { has_deposit = d_civic_byzantine_bureaucracy_capital }
						export_trigger_value_to_variable = {
							trigger = num_assigned_jobs
							parameters = { job = magistrate }
							variable = num_magistrate_jobs
						}
						set_variable = {
							which = num_planet_pops
							value = trigger:num_pops
						}
						remove_deposit = d_civic_byzantine_bureaucracy_capital
						while = {
							count = num_magistrate_jobs
							random_owned_pop = {
								limit = {
									is_unemployed = yes
									is_pop_category = ruler
								}
								clear_pop_category = yes
								if = {
									limit = {
										prev = {
											check_variable = {
												which = num_planet_pops
												value > 1
											}
										}
									}
									resettle_pop = {
										pop = this
										planet = event_target:new_sector_capital
									}
									prev = {
										change_variable = {
											which = num_planet_pops
											value = -1
										}
									}
								}
							}
						}
						clear_variable = num_magistrate_jobs
						clear_variable = num_planet_pops
					}
				}
			}
		}
	}
}

# triggered by on_planet_transfer and each planet from on_post_government_changed
# root = planet
# from = country (new owner)
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_deposit = d_civic_byzantine_bureaucracy_capital
		NAND = {
			exists = owner
			owner = { has_valid_civic = civic_byzantine_bureaucracy }
		}
	}
	immediate = {
		# calculate the jobs created by the deposit
		calculate_total_magistrate_jobs_from_deposit = yes
		# count actually-worked magistrate jobs
		set_variable = {
			which = num_magistrate_jobs
			value = 0
		}
		every_owned_pop = {
			limit = { has_job = magistrate }
			set_timed_pop_flag = {
				flag = former_magistrate
				days = 7
			}
			prev = {
				change_variable = {
					which = num_magistrate_jobs
					value = 1
				}
			}
		}
		remove_deposit = d_civic_byzantine_bureaucracy_capital
		while = {
			count = num_magistrate_jobs_from_deposit
			limit = {
				# minimum of: worked magistrate jobs or magistrate jobs from deposit
				check_variable = {
					which = num_magistrate_jobs
					value > 0
				}
				check_variable = {
					which = num_magistrate_jobs_from_deposit
					value > 0
				}
			}
			random_owned_pop = {
				limit = { has_pop_flag = former_magistrate }
				unemploy_pop = yes
				clear_pop_category = yes
				remove_pop_flag = former_magistrate
			}
			change_variable = {
				which = num_magistrate_jobs
				value = -1
			}
			change_variable = {
				which = num_magistrate_jobs_from_deposit
				value = -1
			}
		}
		clear_variable = num_magistrate_jobs_from_deposit
		clear_variable = num_magistrate_jobs
	}
}

# triggered by on_colony_destroyed
# root = planet
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_deposit = d_civic_byzantine_bureaucracy_capital
	}
	immediate = {
		remove_deposit = d_civic_byzantine_bureaucracy_capital
	}
}

# triggered by on_post_government_changed
# root = country
country_event = {
	id = civic_byzantine_bureaucracy_enhanced.5
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_valid_civic = civic_byzantine_bureaucracy }
	}
	immediate = {
		every_owned_planet = {
			limit = { has_deposit = d_civic_byzantine_bureaucracy_capital }
			planet_event = {
				id = civic_byzantine_bureaucracy_enhanced.3
			}
		}
	}
}